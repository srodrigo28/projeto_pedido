create table users (
  id uuid not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  nome text not null,
  profile_img text null,
  constraint users_pkey primary key (id),
  constraint users_id_fkey foreign key (id) references auth.users (id) on update cascade on delete cascade
) tablespace pg_default;

create table chat (
  id uuid not null default gen_random_uuid(),
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  chat_name text not null,
  chat_description text null,
  chat_img text null,
  last_message text null,
  last_message_time timestamp with time zone null,
  constraint chat_pkey primary key (id)
) tablespace pg_default;

create table chat_members (
  chat_id uuid not null,
  user_id uuid not null,
  joined_at timestamp with time zone not null default now(),
  constraint chat_members_pkey primary key (chat_id, user_id),
  constraint chat_members_chat_id_fkey foreign key (chat_id) references chat (id) on update cascade on delete cascade,
  constraint chat_members_user_id_fkey foreign key (user_id) references users (id) on update cascade on delete cascade
) tablespace pg_default;

create table mensagens (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  message_text text null,
  sender_id uuid not null,
  recipient_id uuid not null,
  img_path text null,
  constraint mensagens_pkey primary key (id),
  constraint mensagens_recipient_id_fkey foreign key (recipient_id) references chat (id) on update cascade on delete cascade,
  constraint mensagens_sender_id_fkey foreign key (sender_id) references users (id) on update cascade on delete cascade,
  constraint mensagens_text_or_img check (
    message_text is not null or img_path is not null
  )
) tablespace pg_default;

/*
1. users
    Armazena os dados do usuÃ¡rio da aplicaÃ§Ã£o.
    ContÃ©m informaÃ§Ãµes bÃ¡sicas como nome, imagem de perfil, data de criaÃ§Ã£o e atualizaÃ§Ã£o.
    O id Ã© vinculado ao sistema de autenticaÃ§Ã£o (auth.users).

ğŸ‘‰ FunÃ§Ã£o: manter o perfil do usuÃ¡rio dentro do app.

2. chat
    Representa cada sala de chat.
    Tem nome, descriÃ§Ã£o, imagem, data de criaÃ§Ã£o/atualizaÃ§Ã£o e informaÃ§Ãµes 
    do Ãºltimo envio (Ãºltima mensagem e horÃ¡rio).
ğŸ‘‰ FunÃ§Ã£o: definir os espaÃ§os de conversa (grupos ou conversas).

3. chat_members
    Faz a ligaÃ§Ã£o entre usuÃ¡rios e chats.
    Guarda quais usuÃ¡rios participam de qual chat, alÃ©m da data de entrada.
    Ã‰ uma tabela de relacionamento muitos-para-muitos.
ğŸ‘‰ FunÃ§Ã£o: controlar a lista de membros de cada chat.


4. mensagens
    Armazena todas as mensagens trocadas nos chats.
    Registra quem enviou (sender_id), para qual chat (recipient_id), 
    o conteÃºdo (message_text) ou imagem (img_path).
    SÃ³ Ã© vÃ¡lida se tiver ao menos texto ou imagem.
ğŸ‘‰ FunÃ§Ã£o: manter o histÃ³rico de mensagens de cada chat.

*/